.. _csharp-atlas-search:

======================
Atlas Full Text Search
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide you can learn how to use the ``Search`` class to build a ``$search``
aggregation pipeline stage with the {+driver-long+}. The ``$search`` pipeline
stage performs a full-text search of fields in an Atlas collection.

To learn more about the ``$search`` pipeline stage, see :manual:`$search
</reference/operator/aggregation/search/>`.

.. note:: Only Available on Atlas for MongoDB v4.2 and Later

   The ``$search`` aggregation-pipeline operator is available only for collections hosted
   on :atlas:`MongoDB Atlas </>` clusters running MongoDB v4.2 or later that are
   covered by an :atlas:`Atlas search index </reference/atlas-search/index-definitions/>`.
   Learn more about the required setup and the functionality of this operator
   from the :ref:`Atlas Search <fts-top-ref>` documentation.

The examples in this guide use the following documents in a collection called
``guitars``:

.. code-block:: json
 
   { "_id": 1, "make": "Fender", "description": "Classic guitars known for their versatility.", "establishedYear": 1946, "in-stock": true, "rating": 9 }
   { "_id": 2, "make": "Gibson", "description": "Classic guitars known for their rich, full tones.", "establishedYear": 1902, "in-stock": true, "rating": 8 }
   { "_id": 3, "make": "PRS", "description": "High-end guitars known for their quality.", "establishedYear": 1985, "in-stock": true, "rating": 9 }
   { "_id": 4, "make": "Kiesel", "description": "Quality guitars made only for custom orders.", "establishedYear": 2015, "in-stock": false }
   { "_id": 5, "make": "Ibanez", "description": "Well-crafted guitars used by many professional guitarists.", "establishedYear": 1957, "in-stock": true, "rating": 7 }
   { "_id": 6, "make": "Strandberg", "description": "Modern guitars known for their headless models.", "establishedYear": 1982, "in-stock": false }

The following ``Guitar`` class models the documents in this collection.

.. code-block:: csharp

   public class Guitar
   {
       public int Id { get; set; }
       public string Make { get; set; }
       public List<string> Models { get; set; }
       public int EstablishedYear { get; set; }
       [BsonElement("in-stock")]
       public bool InStock { get; set; }
       public int? Rating { get; set; }
   }

.. note::

   The documents in the ``guitars`` collection use the camel-case naming
   convention. The examples in this guide use a ``ConventionPack``
   to deserialize the fields in the collection into Pascal case and map them to
   the properties in the ``Guitar`` class.

   To learn more about custom serialization, see :ref:`csharp-custom-serialization`.

Create An Atlas Search Index
----------------------------

Before you can perform a search on an Atlas collection, you must first create an **Atlas
Search index** on the collection. An Atlas Search index is a data structure that
categorizes data in a searchable format. 

To learn how to create an Atlas Search Index see the
:atlas:`Create an Atlas Search Index </atlas-search/create-index>` Atlas guide.

Atlas Search Operators
----------------------

The ``Search`` class contains methods you can use to perform ``$search``
operations. For a full list of available ``$search`` operations, see the :atlas:`Operators and Collectors
</atlas-search/operators-and-collectors>` Atlas guide.

.. note:: 

   The ``Search`` class does not currently support the ``$embeddedDocument`` operator.

Autocomplete
~~~~~~~~~~~~

Use the ``Autocomplete`` method to search for a word or phrase that contains a
sequence of characters from an incomplete input string. The search returns
results based on the tokenization strategy specified when creating the index.

The following example performs an autocomplete search on the ``guitars``
collection using the string "Gib" in the ``make`` field.

.. code-block:: csharp

   var result =  guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Autocomplete(g => g.Make, "Gib"))
       .ToList();

The search returns the following document:

.. code-block:: json

    { "_id" : 2, "make" : "Gibson", "description" : "Classic guitars known for their rich, full tones.", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }

To learn more about the ``autocomplete`` operation, see the :atlas:`Atlas
autocomplete </atlas-search/autocomplete>` guide.

Compound
~~~~~~~~

Use the ``Compound`` method to combine two or more operators into a single
search.

The following example searches the ``guitars`` collection for any documents
that match all of the following criteria:

- The ``rating`` field exists on the document
- The ``in-stock`` field is not ``false``
- The ``establishedYear`` field has a value greater than 1940

.. code-block:: csharp

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Compound()
           .Must(Builders<Guitar>.Search.Exists(g => g.Rating))
           .MustNot(Builders<Guitar>.Search.Equals(g => g.InStock, false))
           .Must(Builders<Guitar>.Search.Range(g => g.EstablishedYear, SearchRangeBuilder.Gt(1940)))
       )
       .ToList();

The search returns the following documents:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "...", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 3, "make" : "PRS", "description" : "...", "establishedYear" : 1985, "in-stock" : true, "rating" : 9 }
   { "_id" : 5, "make" : "Ibanez", "description" : "...", "establishedYear" : 1957, "in-stock" : true, "rating" : 7 }


To learn more about the ``compound`` operation, see the :atlas:`Atlas
compound </atlas-search/compound>` guide.

Equals
~~~~~~

Use the ``Equals`` method to check whether a field matches a specified ``bool``
or ``ObjectId`` value.

The following example searches the ``guitars`` collection for any documents in
which the value of the ``in-stock`` field is ``true``.

.. code-block:: csharp

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Equals(g => g.InStock, true))
       .ToList();

The search returns the following documents:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "...", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 2, "make" : "Gibson", "description" : "...", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }
   { "_id" : 3, "make" : "PRS", "description" : "...", "establishedYear" : 1985, "in-stock" : true, "rating" : 9 }
   { "_id" : 5, "make" : "Ibanez", "description" : "...", "establishedYear" : 1957, "in-stock" : true, "rating" : 7 }


To learn more about the ``equals`` operation, see the :atlas:`Atlas
equals </atlas-search/equals>` guide.

Exists
~~~~~~

Use the ``Exists`` method to search for documents in which a specified indexed
field name exists.

The following example searches the ``guitars`` collection for any documents in
which the ``rating`` field exists.

.. code-block:: csharp

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Exists(g => g.Rating))
       .ToList();

The search returns the following documents:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "...", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 2, "make" : "Gibson", "description" : "...", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }
   { "_id" : 3, "make" : "PRS", "description" : "...", "establishedYear" : 1985, "in-stock" : true, "rating" : 9 }
   { "_id" : 5, "make" : "Ibanez", "description" : "...", "establishedYear" : 1957, "in-stock" : true, "rating" : 7 }


To learn more about the ``equals`` operation, see the :atlas:`Atlas
exists </atlas-search/exists>` guide.

GeoShape
~~~~~~~~

Use the ``GeoShape`` method to search for documents in relation to a given
geometry. When specifying the coordinates to search, longitude must be specified
first, followed by latitude. Longitude values can be between ``-180`` and
``180``, inclusive. Latitude values can be between ``-90`` and ``90``,
inclusive.

.. include:: /includes/atlas-search-support-note.rst

.. _csharp-search-collection-with-location:

Consider some documents in the ``guitars`` collection have added an
``in-stock-location`` field. The changed documents in the collection now look as
follows:

.. code-block:: json
 
   { "_id": 1, "make": "Fender", "description": "...", "establishedYear": 1946, "in-stock": true, "in-stock-location":  { "type": "Point", "coordinates": [ -73.93615, 40.69791 ]}, "rating": 9 }
   { "_id": 2, "make": "Gibson", "description": "...", "establishedYear": 1902, "in-stock": true, "in-stock-location":  { "type": "Point", "coordinates": [ 47.6062, 122.321 ]}, "rating": 8 }

The following example searches for all documents in which the
coordinates in the ``in-stock-location`` field intersect with a specified
polygon:

.. code-block:: csharp

   GeoJsonPolygon<GeoJson2DGeographicCoordinates> searchArea = new(new(new(new GeoJson2DGeographicCoordinates[]
   {
       new(-72.93615, 41.69791),
       new(-72.93615, 40.59791),
       new(-74.93615, 40.59791),
       new(-74.93615, 41.69791),
       new(-72.93615, 41.69791),
   })));

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.GeoShape(g => g.InStockLocation, GeoShapeRelation.Intersects, searchArea))
       .ToList();

The search returns the following document:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "...", "establishedYear" : 1946, "in-stock" : true, "in-stock-location" : { "type" : "Point", "coordinates" : ["-73.93615", "40.69791"] }, "rating" : 9 }

To learn more about the ``geoShape`` operation, see the :atlas:`Atlas
geoShape </atlas-search/geoShape>` guide.

GeoWithin
~~~~~~~~~

Use the ``GeoWithin`` method to search for documents in which the coordinates of
their :manual:`GeoJSON </reference/geojson/>` field are within a specified
geometry. You can search for points that are within a:

- Circle
- Bounding box
- Polygon

When specifying the coordinates to search, longitude must be specified
first, followed by latitude. Longitude values can be between ``-180`` and
``180``, inclusive. Latitude values can be between ``-90`` and ``90``,
inclusive.

.. include:: /includes/atlas-search-support-note.rst

Consider some documents in the ``guitars`` collection have added an
``in-stock-location`` field. The changed documents in the collection now look as
follows:

.. code-block:: json
 
   { "_id": 1, "make": "Fender", "description": "...", "establishedYear": 1946, "in-stock": true, "in-stock-location":  { "type": "Point", "coordinates": [ -73.93615, 40.69791 ]}, "rating": 9 }
   { "_id": 2, "make": "Gibson", "description": "...", "establishedYear": 1902, "in-stock": true, "in-stock-location":  { "type": "Point", "coordinates": [ 47.6062, 122.321 ]}, "rating": 8 }

The following example searches for all documents in which the
coordinates in the ``in-stock-location`` field falls within a specified
polygon: 

.. code-block:: csharp

   GeoJsonPolygon<GeoJson2DGeographicCoordinates> searchArea = new(new(new(new GeoJson2DGeographicCoordinates[]
   {
       new(-74.3994140625, 40.5305017757),
       new(-74.7290039063, 40.5805846641),
       new(-74.7729492188, 40.9467136651),
       new(-74.0698242188, 41.1290213475),
       new(-73.65234375, 40.9964840144),
       new(-72.6416015625, 40.9467136651),
       new(-72.3559570313, 40.7971774152),
       new(-74.3994140625, 40.5305017757),
   })));

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.GeoWithin(g => g.InStockLocation, searchArea))
       .ToList();

The search returns the following document:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "Classic guitars known for their versatility.", "establishedYear" : 1946, "in-stock" : true, "in-stock-location" : { "type" : "Point", "coordinates" : ["-73.93615", "40.69791"] }, "rating" : 9 }

To learn more about the ``geoWithin`` operation, see the :atlas:`Atlas
geoWithin </atlas-search/geoWithin>` guide.

MoreLikeThis
~~~~~~~~~~~~

Use the ``MoreLikeThis`` method to search for documents that are similar to an
input document.

The following example searches the ``guitars`` collection for documents that are
similar to an object in which the value of the ``Description`` field is "Classic
guitar."

.. code-block:: csharp

   var searchDocument = new GuitarSearch()
   {
         Description = "Classic guitar",
   };

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.MoreLikeThis(searchDocument))
       .ToList();

The search returns the following documents:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "Classic guitars known for their versatility.", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 2, "make" : "Gibson", "description" : "Classic guitars known for their rich, full tones.", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }

To learn more about the ``moreLikeThis`` operation, see the :atlas:`Atlas
moreLikeThis </atlas-search/morelikethis>` guide.

Near
~~~~

Use the ``Near`` method to search for documents in which a specified field is
near a given value. You can perform the search on:

- A number field
- A date field
- A geographic point

The following example searches the ``guitars`` collection for documents in which
the value of the ``rating`` field is near ``9``. The documents are returned in
order based on how close the value is to the number ``9``.

.. code-block:: csharp

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Near(g => g.Rating, 9, 1))
       .ToList();

The search returns the following documents:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "...", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 3, "make" : "PRS", "description" : "...", "establishedYear" : 1985, "in-stock" : true, "rating" : 9 }
   { "_id" : 2, "make" : "Gibson", "description" : "...", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }
   { "_id" : 5, "make" : "Ibanez", "description" : "...", "establishedYear" : 1957, "in-stock" : true, "rating" : 7 }


To learn more about the ``near`` operation, see the :atlas:`Atlas
near </atlas-search/near>` guide.

Phrase
~~~~~~

Use the ``Phrase`` method to search for documents in which a specified field
contains an input string.

The following example searches the ``guitars`` collection for documents in which
the ``description`` field contains the phrase "classic guitars."

.. code-block:: csharp

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Phrase(g => g.Description,  "classic guitars"))
       .ToList();

The search returns the following documents:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "Classic guitars known for their versatility.", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 2, "make" : "Gibson", "description" : "Classic guitars known for their rich, full tones.", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }

You can also search the collection for documents that match multiple separate
phrases as follows:

.. code-block:: csharp

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Phrase(g => g.Description,  new List<string>(){"classic guitars", "quality guitars"}))
       .ToList();

This search returns the following documents:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "Classic guitars known for their versatility.", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 4, "make" : "Kiesel", "description" : "Quality guitars made only for custom orders.", "establishedYear" : 2015, "in-stock" : false, "rating" : null }
   { "_id" : 2, "make" : "Gibson", "description" : "Classic guitars known for their rich, full tones.", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }

To learn more about the ``phrase`` operation, see the :atlas:`Atlas
phrase </atlas-search/phrase>` guide.

QueryString
~~~~~~~~~~~

Use the ``QueryString`` method to search for documents using a string with
the following operators and delimiters:

- ``AND``
- ``OR`` 
- ``NOT``
- ``()``

The following example searches the ``guitars`` collection for documents in which
the value of the ``description`` field matches each of the following criteria:

- Contains the string "classic" *or* the string "quality"
- Does not contain the string "custom"

.. code-block:: csharp

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.QueryString(g => g.Description, "(classic OR quality) AND NOT custom"))
       .ToList();

The search returns the following documents:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "Classic guitars known for their versatility.", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 3, "make" : "PRS", "description" : "High-end guitars known for their quality.", "establishedYear" : 1985, "in-stock" : true, "rating" : 9 }
   { "_id" : 2, "make" : "Gibson", "description" : "Classic guitars known for their rich, full tones.", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }

To learn more about the ``queryString`` operation, see the :atlas:`Atlas
queryString </atlas-search/queryString>` guide.

Range
~~~~~

Use the ``Range`` method to search for documents in which the value of a
specified field falls within a given numeric or date range.

The following example searches the ``guitars`` collection for all documents with
an ``establishedYear`` value greater than 1980 and less than 2020.

.. code-block:: csharp

   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Range(r => r.EstablishedYear, SearchRangeBuilder.Gt(1980).Lt(2020)))
       .ToList();

The search returns the following results:

.. code-block:: json

   { "_id" : 3, "make" : "PRS", "description" : "High-end guitars known for their quality.", "establishedYear" : 1985, "in-stock" : true, "rating" : 9 }
   { "_id" : 4, "make" : "Kiesel", "description" : "Quality guitars made only for custom orders.", "establishedYear" : 2015, "in-stock" : false, "rating" : null }
   { "_id" : 6, "make" : "Strandberg", "description" : "Modern guitars known for their headless models.", "establishedYear" : 1982, "in-stock" : false, "rating" : null }

To learn more about the ``range`` operation, see the :atlas:`Atlas
range </atlas-search/range>` guide.

Regex
~~~~~

Use the ``Regex`` method to search for documents using a regular expression.

The following example searches the ``guitars`` collection for documents in which
the value of the ``make`` field contains exactly six letters.

.. code-block:: csharp

   var regex = "[A-Za-z]{6}";
         
   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Regex(r => r.Make, regex))
       .ToList();

The search returns the following results:

.. code-block:: json

   { "_id" : 1, "make" : "Fender", "description" : "Classic guitars known for their versatility.", "establishedYear" : 1946, "in-stock" : true, "rating" : 9 }
   { "_id" : 2, "make" : "Gibson", "description" : "Classic guitars known for their rich, full tones.", "establishedYear" : 1902, "in-stock" : true, "rating" : 8 }
   { "_id" : 4, "make" : "Kiesel", "description" : "Quality guitars made only for custom orders.", "establishedYear" : 2015, "in-stock" : false, "rating" : null }
   { "_id" : 5, "make" : "Ibanez", "description" : "Well-crafted guitars used by many professional guitarists.", "establishedYear" : 1957, "in-stock" : true, "rating" : 7 }

.. note::

   By default the ``regex`` operator cannot run on an analyzed field. You can
   allow it to run on an analyzed field by setting ``allowAnalyzedField`` option
   to true, as follows:

   .. code-block:: csharp

      var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Regex(r => r.Make, regex, true))
       .ToList();

   Setting the ``allowAnalyzedField`` option to true may lead to unexpected
   search results. To learn more, see :atlas:`regex Behavior
   </atlas-search/regex/#behavior>`.

To learn more about the ``regex`` operation, see the :atlas:`Atlas
regex </atlas-search/regex>` guide.

Span
~~~~

Use the ``Span`` method to search for text search matches within regions of a
field. You can use this method to find strings which are near each other to
specified degrees of precision.

.. note::

   The ``span`` operator is more computationally intensive than other operators,
   because queries must keep track of positional information.

The following example searches the ``guitars`` collection for documents in which
the value of the ``description`` field contains the strings "guitars" and
"quality" within one word of each other.

.. code-block:: csharp

   var searchTerms = new[]
   {
             Builders<Guitar>.SearchSpan.Term(g => g.Description, "guitars"),
             Builders<Guitar>.SearchSpan.Term(g => g.Description, "quality")
   };
         
   var result = guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Span(Builders<Guitar>.SearchSpan.Near(searchTerms, 1)))
       .ToList();

The search returns the following document:

.. code-block:: json

   { "_id" : 4, "make" : "Kiesel", "description" : "Quality guitars made only for custom orders.", "establishedYear" : 2015, "in-stock" : false, "rating" : null }

Although the document with ``_id: 3`` contains the strings "guitars" and
"quality", they are separated by more than one word, so the search omits this
document from the results.

To learn more about the ``span`` operation, see the :atlas:`Atlas
span </atlas-search/span>` guide.

Text
~~~~

Use the ``Text`` method to search a document for a given string or array of
strings.

The following example searches the ``guitars`` collection for documents in which
the value of the ``description`` field contains the string "used by
professionals".

.. code-block:: csharp

   var result =  guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Text(g => g.Description, "quality guitars"))
       .ToList();

The search returns the following document:

.. code-block:: json

   { "_id" : 5, "make" : "Ibanez", "description" : "Well-crafted guitars used by many professional guitarists.", "establishedYear" : 1957, "in-stock" : true, "rating" : 7 }

.. tip::

   If your search string contains multiple terms, the method also looks for a match
   for each term in the string separately.

To learn more about the ``text`` operation, see the :atlas:`Atlas
text </atlas-search/text>` guide.

Wildcard
~~~~~~~~

Use the ``Wildcard`` method to search for documents using special characters in
your search string that can match any character. You can use the following
characters in your search:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Character
     - Description
   
   * - ``?``
     - Matches any single character

   * - ``*``
     - Matches 0 or more characters

   * - ``\``
     - Escape character

The following example searches for documents in which the value of the ``make``
field contains the string "Strand" followed by any other characters.

.. code-block:: csharp

   var result =  guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Wildcard(g => g.Make, "Strand*"))
       .ToList();

The search returns the following document:

.. code-block:: json

   { "_id" : 6, "make" : "Strandberg", "description" : "Modern guitars known for their headless models.", "establishedYear" : 1982, "in-stock" : false, "rating" : null }

.. note::

   By default the ``wildcard`` operator cannot run on an analyzed field. You can
   allow it to run on an analyzed field by setting ``allowAnalyzedField`` option
   to true, as follows:

   .. code-block:: csharp

      var result =  guitarsCollection.Aggregate()
       .Search(Builders<Guitar>.Search.Wildcard(g => g.Make, "Strand*", true))
       .ToList();

   Setting the ``allowAnalyzedField`` option to true may lead to unexpected
   search results. To learn more, see :atlas:`wildcard Behavior
   </atlas-search/wildcard/#behavior>`.

To learn more about the ``wildcard`` operation, see the :atlas:`Atlas
wildcard </atlas-search/wildcard>` guide.
