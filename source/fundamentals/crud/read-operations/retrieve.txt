.. _charp-retrieve:

=============
Retrieve Data
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
collections using the ``Find()`` method.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`sample datasets </sample-data>` provided by Atlas. See the 
:ref:`<csharp-quickstart>` to learn how to create a free MongoDB cluster and 
load this sample data.

.. literalinclude:: ../../../includes/code-examples/Restaurant.cs
   :language: csharp
   :copyable:
   :dedent:

.. _csharp-retrieve-find:

Find Operation
--------------

You can use the ``Find()`` method to retrieve documents from a collection. 
The ``Find()`` method takes a **query filter**, that specifies your
search criteria, and returns all matching documents as an ``IFindFluent`` interface.

Find One Document
~~~~~~~~~~~~~~~~~

To find a single document in a collection, pass a query filter that specifies the
criteria of the document you want to find, and use the ``FirstOrDefault`` or 
``FirstOrDefaultAsync`` methods. If more than one document match the query
filter these methods return the *first* matching document.

.. tabs::

   .. tab:: Asynchronous
      :tabid: find-one-async

      .. code-block:: csharp
         :copyable: true

         var restaurants = await _restaurantsCollection.Find(filter).FirstOrDefaultAsync();

   .. tab:: Synchronous
      :tabid: find-one-sync

      .. code-block:: csharp
         :copyable: true

         var restaurants = _restaurantsCollection.Find(filter).FirstOrDefault();

To see a full example of using ``Find()`` to find a single document, see
:ref:`retrieve-runnable-examples`.

Find Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~

Find Documents Using A Cursor
`````````````````````````````

A cursor is a mechanism that allows an application to iterate over database 
results while holding only a subset of them in memory at a given time. Cursors
are useful when your ``Find()`` command returns a large amount of documents.

To find multiple documents in a collection and put them in a ``Cursor``, pass a 
query filter to the ``Find()`` method that specifies the criteria of the documents 
you want to find, then append the ``ToCursor`` or ``ToCursorAsync`` method as follows:

.. tabs::

   .. tab:: Asynchronous
      :tabid: find-cursor-async

      .. code-block:: csharp
         :copyable: true

         var restaurants = await _restaurantsCollection.Find(filter).ToCursorAsync();

   .. tab:: Synchronous
      :tabid: find-cursor-sync

      .. code-block:: csharp
         :copyable: true

         var restaurants = _restaurantsCollection.Find(filter).ToCursor();

Find Documents Using A List
```````````````````````````

If you are returning a small number of documents, or need your results returned
as a ``List`` object, use the ``ToList`` or ``ToListAsync`` methods.

To find multiple documents in a collection using a list, pass a query filter 
to the ``Find()`` method that specifies the criteria of the documents you want 
to find, then append the ``ToList`` or ``ToListAsync`` method as follows:

.. tabs::

   .. tab:: Asynchronous
      :tabid: find-list-async

      .. code-block:: csharp

         var restaurants = await _restaurantsCollection.Find(filter).ToList();

   .. tab:: Synchronous
      :tabid: find-list-sync

      .. code-block:: csharp

         var restaurants = _restaurantsCollection.Find(filter).ToListAsync();

To see a full example of using ``Find()`` to find multiple documents, see
:ref:`retrieve-runnable-examples`.

Find All Documents
~~~~~~~~~~~~~~~~~~

To find all documents in a collection, pass an empty
``BsonDocument`` as a query filter. Then append the ``ToList`` or ``ToListAsync``
method to return the documents as a ``List`` object, or the ``ToCursor`` or ``ToCursorAsync``
method to return the documents as a ``Cursor``.

To see a fully runnable example of using ``Find()`` to find all documents, see 
:ref:`retrieve-runnable-examples`.

Modify Find Behavior
--------------------

You can modify the behavior of ``Find()`` by passing
in ``FindOptions``. If you don't specify any options, the driver uses the 
default values for each option.

You can configure the commonly used options with the following methods:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``BatchSize`` 
     - | Gets or sets the number of documents to return per batch.

   * - ``Collation`` 
     - | Sets the collation options. 

   * - ``Comment`` 
     - | Sets the comment to the query.

   * - ``Hint`` 
     - | Sets the hint for which index to use.
       | Default: ``0``

   * - ``MaxTime`` 
     - | Sets the maximum execution time on the server for this operation.

To see a full list of available options, see 
`FindOptions Properties <{+api-root+}/html/Properties_T_MongoDB_Driver_FindOptions.htm>`__.

Example
-------
The following example passes a query filter and ``FindOptions`` to the ``Find()``
method which performs the following actions:

- Finds all documents with "Pizza" in the ``cuisine`` field
- Sets the ``BatchSize`` to ``3``
- Stores the results in a ``Cursor`` object
- Prints the number of documents currently held in the ``Cursor``

.. io-code-block::
   :copyable: true

   .. input::
      :language: csharp

      var filter = Builders<Restaurant>.Filter.Eq("cuisine", "Pizza");

      var findOptions = new FindOptions
      {
         BatchSize = 3
      };

      using (var cursor = _restaurantsCollection.Find(filter, findOptions).ToCursor())
      {
         cursor.MoveNext();
         WriteLine($"Number of documents in cursor: {cursor.Current.Count()}");
      }

   .. output::
      
      Number of documents in cursor: 3

.. tip::

   Create a ``Cursor`` with a `using statement <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement>`__ to
   ensure the proper disposal of resources.

Additional Information
----------------------

.. TODO: Links to creating filter with Builders and LINQ

.. _retrieve-runnable-examples:

Fully Runnable Examples
~~~~~~~~~~~~~~~~~~~~~~~

For runnable examples of the find operations, see the following usage
examples:

- :ref:`csharp-find-one`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `Find() <{+api-root+}/Overload_MongoDB_Driver_IMongoCollectionExtensions_Find.htm>`__
- `FirstOrDefault() <{+api-root+}/M_MongoDB_Driver_IFindFluentExtensions_FirstOrDefault__2.htm>`__
- `FirstOrDefaultAsync() <{+api-root+}/M_MongoDB_Driver_IAsyncCursorSourceExtensions_FirstOrDefaultAsync__1.htm>`__
- `FindOptions <{+api-root+}/T_MongoDB_Driver_FindOptions.htm>`__
- `ToList() <{+api-root+}/M_MongoDB_Driver_IAsyncCursorSourceExtensions_ToList__1.htm>`__
- `ToListAsync() <{+api-root+}/M_MongoDB_Driver_IAsyncCursorSourceExtensions_ToListAsync__1.htm>`__
- `ToCursor() <{+api-root+}/M_MongoDB_Driver_IAsyncCursorSource_1_ToCursor.htm>`__
- `ToCursorAsync() <{+api-root+}/M_MongoDB_Driver_IAsyncCursorSource_1_ToCursorAsync.htm>`__
